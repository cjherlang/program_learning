多线程的一些优缺点
能更好的利用CPU资源，提高整体处理能力
相对于多进程来说，创建线程消耗的资源更低，调度的开销也更低，共享资源也更方便
相对于单线程来说，有更高的复杂度，尤其需要处理各种竞态条件
线程之间容易相互影响，1个线程崩溃，整个进程都会崩溃
编辑
在C++中使用多线程
如果编译器支持C++11，考虑使用 C++11 thread
一些跨平台的选择，如 boost.thread、pthread/pthread-win32、poco 等
C++11中多线程的简单介绍
C++多线程API
http://www.cplusplus.com/reference/multithreading/
thread
构造函数
    template <class Fn, class... Args>
    explicit thread (Fn&& fn, Args&&... args);
    
通过非成员函数/静态成员函数/成员函数/函数对象/lamba表达式创建

join：阻塞等待线程结束，会回收一些资源
detach：让线程分离，线程执行完之后自动释放资源
在执行线程的析构函数时，如果没有join返回或者detach，会触发terminate()
同步
mutex/recursive_mutex/timed_mutex/recursive_timed_mutex
lock_guard/unique_lock
condition_variable
c++标准库没有提供读写锁和信号量，但是通过mutex和condition_variable基本上就可以完成各种同步的需求
atomic(原子操作)
i++的线程安全性
使用原子操作，性能会更高，使用更方便
无锁数据结构 boost::lockfree::queue/boost::lockfree::stack
future/promise
用于获取异步执行的结果
std::async()
编辑
常见的多线程模型
blocking queue
线程安全的生产者/消费者模式 (src/blocking_queue.h)
队列为空时，消费者会阻塞直到有生产者往队列中添加了数据
生产者往队列中添加数据后，通知消费者处理数据
thread pool
使用blocking queue实现 (src/thread_pool.h)
N个线程同时处理任务
登陆验证线程池，模拟德州在Light框架下的登录流程 (test/login.cpp)，Light用户中心
count down latch
计数器，可以用于线程间状态的同步，调用该计数器的操作会被阻塞，直到计数器归0。 (src/count_down_latch.h)
场景一：主线程创建多个子线程，主线程等待子线程达到某种状态后继续执行
场景一：主线程创建多个子线程，子线程等待主线程达到某种状态后继续执行
异步初始化 (test/async_init.cpp)
德州服务端线程模型
主要有3种功能的线程：逻辑主线程、网络线程、异步处理线程池
网络线程负责处理客户端的socket连接请求、socket数据读写
逻辑主线程负责处理所有的业务逻辑，包括拼包、检查socket连接状态、响应客户端的各种请求等
逻辑主线程拼包时，需要操作网络线程从socket中读取到的数据流，双方使用一个无锁的定长的队列来传递数据流
逻辑主线程向客户端发送数据时，使用了双缓冲队列，逻辑主线程向队列中push数据，网络线程从队列中获取数据然后写入socket，这个双缓冲也是一个无锁队列
异步处理线程池负责处理各种费时的工作，比如：与用户中心的http通信等
编辑
其他
多线程是一把双刃剑，它能够帮助解决许多问题，但同时它也引入了更高的复杂性，在编写多线程程序时，我们要仔细分析各种race condition，避免多线程产生的同步问题。

编辑
demo