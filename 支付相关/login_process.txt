登录是一个有限状态机，是根据状态来进行操作的

1、连接
2、登录：
（1）第三方登录
（2）我们服务器登录

4、进入大厅

5、中间可能存在的一些其他的操作（可能在登录前，也可能在登录后）
 （1）getServerConfig(用原来的ip连接上后，取得新的ip和端口，端口连接再重新连接)
 （2）sendOption
 （3）取得玩家信息
 （4）保存信息
 （5）其他




1、连接
NetworkThread:初始化网络线程
game：game就相当于这个游戏，利用网络线程进行连接
gamesession：由game持有，进行具体连接，以及连接后的交互，连接中的逻辑处理在game中完成

NetworkThread->game::prepare->game::connect->gameSession(socket)::socket.connect->game::onConnect(errorCode)(到此表示连接成功)
->startLogin
->sendserverConfig

2、登录
第三方登录，得到一些信息，
到服务器得到相应账号


优化项：
1、尽量减少中间的消耗：减少步骤，比如原来要发送一个send，接到resp后再发一个send，再接收一个resp，不如直接发一个send，接收两个resp
原来要发40回41，接到41再发68，再回48
改为：发一个69，回70，如果70结果正确，则再回48

客户端取哪些东西太麻烦，服务器与服务器位置更近，速度更快，移到服务器，减少中间的耗时

2、减少没必要的，重复的
3、牺牲一部分可以牺牲的，
没必要准备好数据再去建立ui，可以先建立ui，然后再去刷新刷新ui
sendOption可以晚点再进行发送送
sendserverconfig可以暂时不用

4、资源的加载的时间也可以尽量的减少体积，减少加载的时间

网络优化
减少包的大小
减少包的频率
延迟请求
用户体验上


断线重连，就是socket的连接断了，socket会进行重新连接，重新连接上后会继续走到game的onConnect,重走登录逻辑